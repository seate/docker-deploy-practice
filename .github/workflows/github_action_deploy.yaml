name: CD with Gradle

# 언제 이 파일의 내용이 실행될 것인지 정의합니다.
# 여기서는 main 브랜치에 코드가 push 되었을 때 실행할 것을 말하고 있습니다.
on:
    push:
        branches: [ "master" ]

env:
    DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
    DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
    PROPERTIES_YAML: ${{ secrets.PROPERTIES_YAML }}
    EC2_HOST: ${{ secrets.EC2_HOST }}
    EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
    EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
    EC2_SSH_PORT: ${{ secrets.EC2_SSH_PORT }}

# 실제 실행될 내용들을 정의합니다.
jobs:
    build-and-push:
        runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            # open jdk 17 버전 환경을 세팅
            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: '17'
                  distribution: "adopt"

            # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
            - name: Make application.yaml
              run: |
                  cd ./src/main/resources
                  touch ./application.yaml
                  echo "${{ env.PROPERTIES_YAML }}" > ./application.yaml
              shell: bash

            # gradle을 통해 소스를 빌드.
            - name: Build with Gradle
              run: |
                  chmod +x ./gradlew
                  ./gradlew clean build -x test

            - name: docker login
              uses: docker/login-action@v1
              with:
                  username: ${{ env.DOCKER_USERNAME }}
                  password: ${{ env.DOCKER_PASSWORD }}

            - name: Build and push docker image
              uses: docker/build-push-action@v2
              with:
                  context: .
                  push: true #빌드 후 배포 여부 체크
                  tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest


            -   name: Deploy to EC2
                uses: appleboy/ssh-action@master
                with:
                    host: ${{ env.EC2_HOST }}
                    username: ${{ env.EC2_USERNAME }}
                    key: ${{ env.EC2_PRIVATE_KEY }}
                    port: ${{ env.EC2_SSH_PORT }}
                    script: |
                        sudo docker pull ${{ env.DOCKER_IMAGE_NAME}}:latest
                        sudo docker-compose up -d